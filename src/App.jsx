// import React, { useState, useEffect } from 'react';
// import './App.css';
// import TaskForm from './components/TaskForm';
// import TaskList from './components/TaskList';
// import ErrorBoundary from './components/ErrorBoundary';

// function App() {
//   const [tasks, setTasks] = useState([]);
//   const [filter, setFilter] = useState('all');
//   const [theme, setTheme] = useState('light');

//   useEffect(() => {
//     try {
//       const savedTasks = localStorage.getItem('tasks');
//       console.log('Raw localStorage tasks:', savedTasks);
//       if (savedTasks) {
//         const parsedTasks = JSON.parse(savedTasks);
//         console.log('Parsed localStorage tasks:', parsedTasks);
//         if (Array.isArray(parsedTasks)) {
//           const validTasks = parsedTasks.filter(
//             (task) => task && typeof task === 'object' && task.id && task.title
//           );
//           console.log('Valid tasks:', validTasks);
//           setTasks(validTasks);
//         } else {
//           console.log('localStorage tasks is not an array, resetting to []');
//           setTasks([]);
//         }
//       } else {
//         console.log('No tasks in localStorage, initializing with []');
//         setTasks([]);
//       }
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á –∏–∑ localStorage:', error);
//       setTasks([]);
//     }
//   }, []);

//   useEffect(() => {
//     try {
//       console.log('Saving tasks to localStorage:', tasks);
//       localStorage.setItem('tasks', JSON.stringify(tasks));
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á –≤ localStorage:', error);
//     }
//   }, [tasks]);

//   const addTask = (task) => {
//     if (!task || typeof task !== 'object' || !task.title?.trim()) {
//       alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!');
//       return;
//     }
//     const newTask = {
//       title: task.title.trim(),
//       description: task.description ? task.description.trim() : '',
//       deadline: task.deadline || '',
//       id: Date.now(),
//       status: 'new',
//     };
//     console.log('Adding task:', newTask);
//     setTasks((prevTasks) => {
//       const updatedTasks = [...prevTasks, newTask];
//       console.log('Updated tasks:', updatedTasks);
//       return updatedTasks;
//     });
//   };

//   const deleteTask = (id) => {
//     setTasks(tasks.filter((task) => task.id !== id));
//   };

//   const updateTask = (updatedTask) => {
//     if (!updatedTask.title?.trim()) {
//       alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!');
//       return;
//     }
//     setTasks(tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task)));
//   };

//   const toggleStatus = (id, status) => {
//     setTasks(
//       tasks.map((task) =>
//         task.id === id ? { ...task, status } : task
//       )
//     );
//   };

//   const toggleTheme = () => {
//     setTheme(theme === 'light' ? 'dark' : 'light');
//   };

//   const filteredTasks = Array.isArray(tasks)
//     ? tasks.filter((task) => {
//         if (filter === 'all') return true;
//         return task.status === filter;
//       })
//     : [];
//   console.log('filteredTasks:', filteredTasks);

//   return (
//     <ErrorBoundary>
//       <div className={`app ${theme}`}>
//         <div className="container">
//           <header className="header">
//             <h1 className="title">TO DO LIST</h1>
//             <button onClick={toggleTheme} className="theme-toggle">
//               {theme === 'light' ? 'üåô –¢—ë–º–Ω–∞—è' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è'}
//             </button>
//           </header>
//           <TaskForm addTask={addTask} theme={theme} />
//           <div className="filter">
//             <label className="filter-label">–§–∏–ª—å—Ç—Ä:</label>
//             <select onChange={(e) => setFilter(e.target.value)} className="filter-select">
//               <option value="all">–í—Å–µ</option>
//               <option value="new">–ù–æ–≤—ã–µ</option>
//               <option value="in-progress">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
//               <option value="completed">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ</option>
//             </select>
//           </div>
//           <TaskList
//             tasks={filteredTasks}
//             deleteTask={deleteTask}
//             updateTask={updateTask}
//             toggleStatus={toggleStatus}
//             theme={theme}
//           />
//         </div>
//       </div>
//     </ErrorBoundary>
//   );
// }

// export default App;
import React, { useState, useEffect } from 'react';
import './App.css';
import TaskForm from './components/TaskForm';
import TaskList from './components/TaskList';
import ErrorBoundary from './components/ErrorBoundary';

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á, —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Ç–µ–º—ã
  const [tasks, setTasks] = useState([]);
  const [filter, setFilter] = useState('all');
  const [theme, setTheme] = useState('light');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    console.log("–ü—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ localStorage...");
    const savedTasks = localStorage.getItem('tasks'); // –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É 'tasks'
    if (savedTasks) {
      try {
        const parsedTasks = JSON.parse(savedTasks); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
        console.log("–î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:", parsedTasks);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (Array.isArray(parsedTasks)) {
          setTasks(parsedTasks); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          console.log("–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage!");
        } else {
          console.log("–î–∞–Ω–Ω—ã–µ –≤ localStorage –Ω–µ –º–∞—Å—Å–∏–≤, —Å—Ç–∞–≤–ª—é –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.");
          setTasks([]);
        }
      } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ localStorage:", error);
        setTasks([]); // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      }
    } else {
      console.log("–í localStorage –Ω–µ—Ç –∑–∞–¥–∞—á, —Å—Ç–∞–≤–ª—é –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.");
      setTasks([]);
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ localStorage, –∫–æ–≥–¥–∞ –æ–Ω–∏ –º–µ–Ω—è—é—Ç—Å—è
  useEffect(() => {
    console.log("–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–¥–∞—á–∏ –≤ localStorage:", tasks);
    try {
      localStorage.setItem('tasks', JSON.stringify(tasks)); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      console.log("–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage!");
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏! –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞–º—è—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.");
    }
  }, [tasks]); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ tasks

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const addTask = (task) => {
    if (!task || !task.title || task.title.trim() === '') {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!");
      return;
    }
    const newTask = {
      title: task.title.trim(),
      description: task.description ? task.description.trim() : '',
      deadline: task.deadline || '',
      id: Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
      status: 'new', // –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
    console.log("–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:", newTask);
    setTasks([...tasks, newTask]); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –º–∞—Å—Å–∏–≤
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const deleteTask = (id) => {
    console.log("–£–¥–∞–ª—è—é –∑–∞–¥–∞—á—É —Å ID:", id);
    setTasks(tasks.filter((task) => task.id !== id)); // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ ID
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const updateTask = (updatedTask) => {
    if (!updatedTask.title || updatedTask.title.trim() === '') {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!");
      return;
    }
    console.log("–†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∑–∞–¥–∞—á—É:", updatedTask);
    setTasks(tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task)));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  const toggleStatus = (id, status) => {
    console.log("–ú–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å ID:", id, "–Ω–∞:", status);
    setTasks(tasks.map((task) => (task.id === id ? { ...task, status } : task)));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
    console.log("–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:", theme === 'light' ? 'dark' : 'light');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
  const clearTasks = () => {
    setTasks([]); // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
    localStorage.removeItem('tasks'); // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    console.log("–í—Å–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã!");
    alert("–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!");
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  const filteredTasks = Array.isArray(tasks)
    ? tasks.filter((task) => {
        if (filter === 'all') return true;
        return task.status === filter;
      })
    : [];
  console.log("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", filteredTasks);

  return (
    <ErrorBoundary>
      <div className={`app ${theme}`}>
        <div className="container">
          <header className="header">
            <h1 className="title">–ú–æ–∏ –∑–∞–¥–∞—á–∏</h1>
            <button onClick={toggleTheme} className="theme-toggle">
              {theme === 'light' ? 'üåô –¢—ë–º–Ω–∞—è' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è'}
            </button>
          </header>
          <TaskForm addTask={addTask} theme={theme} />
          <div className="filter">
            <label className="filter-label">–§–∏–ª—å—Ç—Ä:</label>
            <select onChange={(e) => setFilter(e.target.value)} className="filter-select">
              <option value="all">–í—Å–µ</option>
              <option value="new">–ù–æ–≤—ã–µ</option>
              <option value="in-progress">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
              <option value="completed">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ</option>
            </select>
            <button onClick={clearTasks} className="task-button delete">
              –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
            </button>
          </div>
          <TaskList
            tasks={filteredTasks}
            deleteTask={deleteTask}
            updateTask={updateTask}
            toggleStatus={toggleStatus}
            theme={theme}
          />
        </div>
      </div>
    </ErrorBoundary>
  );
}

export default App;